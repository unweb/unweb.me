// this code was autogenerated from PJS
var sl1 = function($p) {
  var vPoint = (function() {
  function vPoint() {
  var $this_1 = this;
  function $superCstr(){$p.extendClassChain($this_1)}
  $this_1.x = 0;
  $this_1.y = 0;
  $this_1.z = 0;
  $this_1.px = 0;
  $this_1.py = 0;
  $this_1.pz = 0;
  $this_1.fx =  $p.random(0.5) - 0.25;
  $this_1.fy =  $p.random(0.5) - 0.25;
  $this_1.fz =  $p.random(0.5) - 0.25;
  $this_1.s =  30*(1/$p.sqrt(2*$p.PI))*$p.pow(2.71828, -0.5*$p.pow($p.random(18)-9,2)) + 2;
  function step$0() {
  var tx =  $this_1.x;
      var ty =  $this_1.y;
      var tz =  $this_1.z;
      $this_1.x += (tx - $this_1.px) * F + $this_1.fx;
      $this_1.y += (ty - $this_1.py) * F + $this_1.fy;
      $this_1.z += (tz - $this_1.pz) * F + $this_1.fz;
      $this_1.px = tx;
      $this_1.py = ty;
      $this_1.pz = tz;
      $this_1.fx = $this_1.fy = $this_1.fz = 0;
  }
  $p.addMethod($this_1, 'step', step$0);
  function $constr_0(){
  $superCstr();
  
  $this_1.x = $this_1.px = $p.random(60) - 30;
      $this_1.y = $this_1.py = $p.random(60) - 30;
      $this_1.z = $this_1.pz = $p.random(60) - 30;
  }
  
  function $constr_3(xin, yin, zin){
  $superCstr();
  
  $this_1.x = xin;
      $this_1.y = yin;
      $this_1.z = zin;
  }
  
  function $constr() {
  if(arguments.length === 0) { $constr_0.apply($this_1, arguments); } else if(arguments.length === 3) { $constr_3.apply($this_1, arguments); } else $superCstr();
  }
  $constr.apply(null, arguments);
  }
  return vPoint;
  })();
  $p.vPoint = vPoint;
  
  var points =  new $p.ArrayList();
  var C =  35;
  var R2 =  C*C;
  var S =  0.035;
  var F =  0.88;
  var zDim =  120;
  var counter =  0;
  var sinc = 0,cosc = 0;
  var offsetX = 0;
  var offsetY = 0;
  
  var Sc =  0.08;
  var Cc =  130;
  var Cc2 =  Cc*Cc;
  
  var centr =  new vPoint(0,0,0);
  
  function setup() {
  $p.size(320, 320, $p.P2D);
    $p.background(0,0);
    $p.frameRate(15);
    while (points.size() < 80) {
  points.add(new vPoint());
  }
    offsetX = $p.width*0.5;
    offsetY = $p.height*0.5;
  }
  $p.setup = setup;
  
  function draw() {
  $p.background(0,0);
  
    counter += 0.01;
    if (counter > 0.4) F = 1;
    sinc = $p.sin(counter);
    cosc = $p.cos(counter);
  
    $p.fill(255);
    $p.stroke(255);
    for (var $it0 = new $p.ObjectIterator( points), p  = void(0); $it0.hasNext() && ((p  = $it0.next()) || true);) {
  p.step();
      $p.ellipse(offsetX + p.x * sinc + p.z * cosc, offsetY + p.y, p.s, p.s);
  }
  
    centerForce();
    stepAndDrawSprings();
    if (S<0.01) S+=.0005;
  }
  $p.draw = draw;
  
  function stepAndDrawSprings() {
  $p.noFill();
    var dx = 0,dy = 0,dz = 0,L2 = 0,d = 0,lx = 0,ly = 0,lz = 0;
    for (var i = 0; i<points.size(); i++) {
  var p1 =  points.get(i);
      for (var j = i+1; j<points.size(); j++) {
  var p2 =  points.get(j);
        dx=p2.x-p1.x;
        dy=p2.y-p1.y;
        dz=p2.z-p1.z;
        L2 = dx*dx+dy*dy+dz*dz;
        if (L2<R2) {
  d = C + L2/C; 
          d = (d*.25 + L2/d);
          d = (S*(1-(C/d)));
          lx=d*dx;
          ly=d*dy;
          lz=d*dz;
          p1.fx+=lx;
          p1.fy+=ly;
          p1.fz+=lz;
          p2.fx-=lx;
          p2.fy-=ly;
          p2.fz-=lz;
  }
        var T =  189*p1.s*p2.s;
        if (L2<T) {
  var x =  L2;
          var A1 =  1.1*R2;
          var A2 =  T;
          $p.stroke(255, $p.max(0, 255 * (x - A2)/(A1 - A2) ));
          $p.strokeWeight(1);
          $p.line(offsetX + p1.x * sinc + p1.z * cosc,offsetY + p1.y, offsetX + p2.x * sinc + p2.z*cosc,offsetY + p2.y);
  }
  }
  }
  }
  $p.stepAndDrawSprings = stepAndDrawSprings;
  
  function centerForce() {
  $p.noFill();
    var dx = 0,dy = 0,dz = 0,L2 = 0,d = 0,lx = 0,ly = 0,lz = 0;
    for (var i = 0; i<points.size(); i++) {
  var p =  points.get(i);
        dx=centr.x-p.x;
        dy=centr.y-p.y;
        dz=centr.z-p.z;
        L2 = dx*dx+dy*dy+dz*dz;
        if (Cc2 < L2) {
  d = Cc + L2/Cc; 
          d = (d*.25 + L2/d);
          d = (Sc*(1-(Cc/d)));
          lx=d*dx;
          ly=d*dy;
          lz=d*dz;
          p.fx+=lx;
          p.fy+=ly;
          p.fz+=lz;
  }
  }
  }
  $p.centerForce = centerForce;

}